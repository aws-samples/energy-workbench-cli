"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CdlPythonLambda = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cdk_lib_2 = require("aws-cdk-lib");
const aws_cdk_lib_3 = require("aws-cdk-lib");
/**
 * This construct provides a pre-configured default Python Lambda Function.
 * This pre-configured default meets cdk_nag AWS specifications
 * for security and well-architected infrastructure.
 */
class CdlPythonLambda extends aws_cdk_lib_2.aws_lambda.Function {
    /**
     * Creates a Python Lambda Function that enables cdk_nag compliance through defaults
     * This Lambda Function includes a FIFO dead letter queue,
     * X-Ray tracing enabled by default, and x86 architecture
     * to utilize Graviton2 instances and improve performance
     * and reduce electricity consumption.
     * @param scope
     * @param id
     * @param CdlLambdaProps
     */
    constructor(scope, id, props) {
        super(scope, id, {
            ...props,
            /**
             * Creates a Python Lambda Function with FIFO dead letter queue, x86 architecture,
             * and X-ray tracing.
             */
            runtime: props.runtime ? props.runtime : aws_cdk_lib_2.aws_lambda.Runtime.PYTHON_3_10,
            code: props.code,
            handler: props.handler,
            layers: props.layers,
            description: props.description,
            role: props.role,
            timeout: props.timeout ? props.timeout : aws_cdk_lib_1.Duration.minutes(5),
            environment: props.environment || undefined,
            architecture: aws_cdk_lib_2.aws_lambda.Architecture.X86_64,
            deadLetterQueueEnabled: true,
            deadLetterQueue: new aws_cdk_lib_3.aws_sqs.Queue(scope, `${id}DLQ`, {
                queueName: `${id}dlq`,
                deliveryDelay: aws_cdk_lib_1.Duration.millis(0),
                visibilityTimeout: props.timeout ? props.timeout : aws_cdk_lib_1.Duration.minutes(5),
                enforceSSL: true,
                retentionPeriod: aws_cdk_lib_1.Duration.days(14),
            }),
            tracing: aws_cdk_lib_2.aws_lambda.Tracing.ACTIVE, // enable x-ray tracing for all functions
        });
    }
}
exports.CdlPythonLambda = CdlPythonLambda;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LWNkbC1weXRob24tbGFtYmRhLWZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29uc3RydWN0LWNkbC1weXRob24tbGFtYmRhLWZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDZDQUFzQztBQUN0Qyw2Q0FBa0Q7QUFHbEQsNkNBQTRDO0FBZ0U1Qzs7OztHQUlHO0FBRUgsTUFBYSxlQUFnQixTQUFRLHdCQUFNLENBQUMsUUFBUTtJQU9sRDs7Ozs7Ozs7O09BU0c7SUFDSCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXFCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsR0FBRyxLQUFLO1lBQ1I7OztlQUdHO1lBQ0gsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHdCQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTztZQUN0QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzlCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtZQUNoQixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsc0JBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzVELFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVyxJQUFJLFNBQVM7WUFDM0MsWUFBWSxFQUFFLHdCQUFNLENBQUMsWUFBWSxDQUFDLE1BQU07WUFDeEMsc0JBQXNCLEVBQUUsSUFBSTtZQUM1QixlQUFlLEVBQUUsSUFBSSxxQkFBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtnQkFDaEQsU0FBUyxFQUFFLEdBQUcsRUFBRSxLQUFLO2dCQUNyQixhQUFhLEVBQUUsc0JBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxzQkFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RFLFVBQVUsRUFBRSxJQUFJO2dCQUNoQixlQUFlLEVBQUUsc0JBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2FBQ25DLENBQUM7WUFDRixPQUFPLEVBQUUsd0JBQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLHlDQUF5QztTQUMxRSxDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0Y7QUE1Q0QsMENBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IGF3c19sYW1iZGEgYXMgbGFtYmRhIH0gZnJvbSAnYXdzLWNkay1saWInXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJ1xuaW1wb3J0IHsgSW50ZWdlciB9IGZyb20gJ2F3cy1zZGsvY2xpZW50cy9hcGlnYXRld2F5J1xuaW1wb3J0IHsgYXdzX3NxcyBhcyBzcXMgfSBmcm9tICdhd3MtY2RrLWxpYidcbmltcG9ydCB7IElSb2xlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSdcbmltcG9ydCB7IE5hZ1N1cHByZXNzaW9ucyB9IGZyb20gJ2Nkay1uYWcnXG5cbmludGVyZmFjZSBDZGxMYW1iZGFQcm9wcyB7XG4gIC8qKlxuICAgKiBSZXF1aXJlZDogbmFtZSBvZiBsYW1iZGEgZnVuY3Rpb25cbiAgICovXG4gIHJlYWRvbmx5IGxhbWJkYU5hbWU/OiBzdHJpbmdcblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBjb25jdXJyZW5jeSBsaW1pdFxuICAgKiBAZGVmYXVsdCAxMDBcbiAgICovXG4gIHJlYWRvbmx5IGNvbmN1cnJlbmN5TGltaXQ/OiBJbnRlZ2VyXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsOiBzZXQgdGltZW91dCBtaW51dGVzXG4gICAqIEBkZWZhdWx0IDE1XG4gICAqL1xuICByZWFkb25seSB0aW1lb3V0PzogRHVyYXRpb25cblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBsYW1iZGEgcnVudGltZSB0byBzZWxlY3QgZGlmZmVyZW50IHB5dGhvbiBydW50aW1lXG4gICAqIEBkZWZhdWx0IHJ1bnRpbWU6IGxhbWJkYS5SdW50aW1lLlBZVEhPTl8zXzEwXG4gICAqL1xuICByZWFkb25seSBydW50aW1lPzogbGFtYmRhLlJ1bnRpbWVcblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBhIHNwZWNpZmljIHJvbGUgZm9yIHRoZSBsYW1iZGEgZnVuY3Rpb25cbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICByZWFkb25seSByb2xlPzogSVJvbGVcblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBhIGRlc2NyaXB0aW9uIGZvciB0aGUgbGFtYmRhIGZ1bmN0aW9uXG4gICAqIEBkZWZhdWx0IHVuZGVmaW5lZFxuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmdcblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBoYW5kbGVyIG5hbWUgLS0gZGVmYXVsdCBpcyBcIm1haW4uaGFuZGxlclwiXG4gICAqL1xuICByZWFkb25seSBoYW5kbGVyOiBzdHJpbmdcblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBoYW5kbGVyIGRpcmVjdG9yeSBwYXRoIC0tIGRlZmF1bHQgaXMgJy4vbGFtYmRhJ1xuICAgKiBAZGVmYXVsdCBcIi4vbGFtYmRhXCJcbiAgICovXG4gIHJlYWRvbmx5IGNvZGU6IGxhbWJkYS5Db2RlXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsOiBzZXQgaGFuZGxlciBkaXJlY3RvcnkgcGF0aCAtLSBkZWZhdWx0IGlzICcuL2xhbWJkYSdcbiAgICogQGRlZmF1bHQgdW5kZWZpbmVkXG4gICAqL1xuICByZWFkb25seSBsYXllcnM/OiBBcnJheTxsYW1iZGEuSUxheWVyVmVyc2lvbj5cblxuICAvKipcbiAgICogT3B0aW9uYWw6IHNldCBlbnZpcm9ubWVudGFsIHZhcmlhYmxlcyAoYWx3YXlzIGVuY3J5cHRlZCBieSBkZWZhdWx0KVxuICAgKiBAZGVmYXVsdCB1bmRlZmluZWRcbiAgICovXG4gIHJlYWRvbmx5IGVudmlyb25tZW50PzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxufVxuXG4vKipcbiAqIFRoaXMgY29uc3RydWN0IHByb3ZpZGVzIGEgcHJlLWNvbmZpZ3VyZWQgZGVmYXVsdCBQeXRob24gTGFtYmRhIEZ1bmN0aW9uLlxuICogVGhpcyBwcmUtY29uZmlndXJlZCBkZWZhdWx0IG1lZXRzIGNka19uYWcgQVdTIHNwZWNpZmljYXRpb25zXG4gKiBmb3Igc2VjdXJpdHkgYW5kIHdlbGwtYXJjaGl0ZWN0ZWQgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cblxuZXhwb3J0IGNsYXNzIENkbFB5dGhvbkxhbWJkYSBleHRlbmRzIGxhbWJkYS5GdW5jdGlvbiB7XG4gIC8qKlxuICAgKiBTMyBidWNrZXQgb2JqZWN0IHRvIGJlIHBhc3NlZCB0byBvdGhlciBmdW5jdGlvbnNcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsYW1iZGFGdW5jdGlvbjogbGFtYmRhLkZ1bmN0aW9uXG4gIHB1YmxpYyByZWFkb25seSBsYW1iZGFEbHE6IHNxcy5RdWV1ZVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUHl0aG9uIExhbWJkYSBGdW5jdGlvbiB0aGF0IGVuYWJsZXMgY2RrX25hZyBjb21wbGlhbmNlIHRocm91Z2ggZGVmYXVsdHNcbiAgICogVGhpcyBMYW1iZGEgRnVuY3Rpb24gaW5jbHVkZXMgYSBGSUZPIGRlYWQgbGV0dGVyIHF1ZXVlLFxuICAgKiBYLVJheSB0cmFjaW5nIGVuYWJsZWQgYnkgZGVmYXVsdCwgYW5kIHg4NiBhcmNoaXRlY3R1cmVcbiAgICogdG8gdXRpbGl6ZSBHcmF2aXRvbjIgaW5zdGFuY2VzIGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlXG4gICAqIGFuZCByZWR1Y2UgZWxlY3RyaWNpdHkgY29uc3VtcHRpb24uXG4gICAqIEBwYXJhbSBzY29wZVxuICAgKiBAcGFyYW0gaWRcbiAgICogQHBhcmFtIENkbExhbWJkYVByb3BzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQ2RsTGFtYmRhUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgLyoqXG4gICAgICAgKiBDcmVhdGVzIGEgUHl0aG9uIExhbWJkYSBGdW5jdGlvbiB3aXRoIEZJRk8gZGVhZCBsZXR0ZXIgcXVldWUsIHg4NiBhcmNoaXRlY3R1cmUsXG4gICAgICAgKiBhbmQgWC1yYXkgdHJhY2luZy5cbiAgICAgICAqL1xuICAgICAgcnVudGltZTogcHJvcHMucnVudGltZSA/IHByb3BzLnJ1bnRpbWUgOiBsYW1iZGEuUnVudGltZS5QWVRIT05fM18xMCxcbiAgICAgIGNvZGU6IHByb3BzLmNvZGUsXG4gICAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgICAgbGF5ZXJzOiBwcm9wcy5sYXllcnMsXG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMuZGVzY3JpcHRpb24sXG4gICAgICByb2xlOiBwcm9wcy5yb2xlLFxuICAgICAgdGltZW91dDogcHJvcHMudGltZW91dCA/IHByb3BzLnRpbWVvdXQgOiBEdXJhdGlvbi5taW51dGVzKDUpLFxuICAgICAgZW52aXJvbm1lbnQ6IHByb3BzLmVudmlyb25tZW50IHx8IHVuZGVmaW5lZCxcbiAgICAgIGFyY2hpdGVjdHVyZTogbGFtYmRhLkFyY2hpdGVjdHVyZS5YODZfNjQsIC8vIHNwZWNpZnkgZ3Jhdml0b24yIGJhc2VkIGxhbWJkYSBhcmNoaXRlY3R1cmVcbiAgICAgIGRlYWRMZXR0ZXJRdWV1ZUVuYWJsZWQ6IHRydWUsIC8vIGVuYWJsZSBGSUZPIGRlYWQgbGV0dGVyIHF1ZXVlXG4gICAgICBkZWFkTGV0dGVyUXVldWU6IG5ldyBzcXMuUXVldWUoc2NvcGUsIGAke2lkfURMUWAsIHtcbiAgICAgICAgcXVldWVOYW1lOiBgJHtpZH1kbHFgLFxuICAgICAgICBkZWxpdmVyeURlbGF5OiBEdXJhdGlvbi5taWxsaXMoMCksXG4gICAgICAgIHZpc2liaWxpdHlUaW1lb3V0OiBwcm9wcy50aW1lb3V0ID8gcHJvcHMudGltZW91dCA6IER1cmF0aW9uLm1pbnV0ZXMoNSksXG4gICAgICAgIGVuZm9yY2VTU0w6IHRydWUsXG4gICAgICAgIHJldGVudGlvblBlcmlvZDogRHVyYXRpb24uZGF5cygxNCksXG4gICAgICB9KSxcbiAgICAgIHRyYWNpbmc6IGxhbWJkYS5UcmFjaW5nLkFDVElWRSwgLy8gZW5hYmxlIHgtcmF5IHRyYWNpbmcgZm9yIGFsbCBmdW5jdGlvbnNcbiAgICB9KVxuICB9XG59XG4iXX0=